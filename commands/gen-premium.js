const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { config } = require('../utils/config.js');
const { giftCodes, saveGiftCodes, generateGiftCode } = require('../utils/premium.js');
const { logToWebhookAndConsole } = require('../utils/logger.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('gen-premium')
    .setDescription('üéÅ G√©n√®re un code cadeau premium (Staff uniquement)'),
  
  async execute(interaction) {
    // V√©rifier si l'utilisateur est dans la liste du staff
    if (!config.staff.includes(interaction.user.id)) {
      return interaction.reply({
        content: '‚ùå Vous n\'avez pas les permissions n√©cessaires pour utiliser cette commande.',
        ephemeral: true
      });
    }

    try {
      await interaction.deferReply({ ephemeral: true });

      // G√©n√©rer un code unique
      let newCode;
      do {
        newCode = generateGiftCode();
      } while (giftCodes[newCode]);

      // Cr√©er l'entr√©e du code cadeau
      giftCodes[newCode] = {
        guildId: null,
        createdBy: interaction.user.id,
        createdAt: new Date().toISOString(),
        used: false,
        usedBy: null,
        usedAt: null
      };

      // Sauvegarder les codes
      const saveSuccess = saveGiftCodes();
      
      if (!saveSuccess) {
        return await interaction.editReply({
          content: '‚ùå Erreur lors de la sauvegarde du code cadeau.'
        });
      }

      // Log de g√©n√©ration
      await logToWebhookAndConsole(
        "üéÅ Code cadeau g√©n√©r√©",
        `**${interaction.user.username}** a g√©n√©r√© un nouveau code cadeau premium`,
        [
          { name: "Code", value: `\`${newCode}\``, inline: true },
          { name: "G√©n√©rateur", value: `${interaction.user.username} (ID: ${interaction.user.id})`, inline: true },
          { name: "Date", value: new Date().toLocaleString(), inline: true },
          { name: "Statut", value: "Non utilis√©", inline: true }
        ],
        0x9B59B6
      );

      // Cr√©er l'embed de r√©ponse
      const embed = new EmbedBuilder()
        .setTitle('üéÅ Code cadeau g√©n√©r√© avec succ√®s!')
        .setDescription(`Un nouveau code cadeau premium a √©t√© cr√©√©.`)
        .addFields(
          { name: 'üé´ Code', value: `\`${newCode}\``, inline: false },
          { name: 'üìã Instructions', value: 'Ce code peut √™tre utilis√© avec la commande `/redeem-premium` pour activer le premium sur un serveur.', inline: false },
          { name: '‚ö†Ô∏è Important', value: '‚Ä¢ Gardez ce code secret\n‚Ä¢ Utilisable une seule fois\n‚Ä¢ Valide ind√©finiment\n‚Ä¢ Active le premium √† vie', inline: false }
        )
        .setColor(0x9B59B6)
        .setFooter({ text: `G√©n√©r√© par ${interaction.user.username} ‚Ä¢ ${new Date().toLocaleString()}` })
        .setTimestamp();

      await interaction.editReply({
        embeds: [embed]
      });

      console.log(`Code cadeau ${newCode} g√©n√©r√© par ${interaction.user.username} (${interaction.user.id})`);

    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du code cadeau:', error);
      
      if (interaction.deferred) {
        await interaction.editReply({
          content: '‚ùå Erreur lors de la g√©n√©ration du code cadeau.'
        });
      } else {
        await interaction.reply({
          content: '‚ùå Erreur lors de la g√©n√©ration du code cadeau.',
          ephemeral: true
        });
      }
    }
  }
};