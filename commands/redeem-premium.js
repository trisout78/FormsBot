const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { giftCodes, premiumGuilds, saveGiftCodes, savePremiumList } = require('../utils/premium.js');
const { logToWebhookAndConsole } = require('../utils/logger.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('redeem-premium')
    .setDescription('üéÅ Utiliser un code cadeau premium')
    .addStringOption(option =>
      option.setName('code')
        .setDescription('Le code cadeau √† utiliser')
        .setRequired(true)
    ),
  
  async execute(interaction, client) {
    const code = interaction.options.getString('code').toUpperCase().trim();

    // V√©rifier les permissions
    if (!interaction.member.permissions.has(PermissionFlagsBits.ManageGuild)) {
      return interaction.reply({
        content: '‚ùå Vous devez avoir la permission "G√©rer le serveur" pour utiliser un code cadeau premium.',
        ephemeral: true
      });
    }

    // V√©rifier si le serveur est d√©j√† premium
    if (premiumGuilds.includes(interaction.guildId)) {
      const embed = new EmbedBuilder()
        .setTitle('‚ú® Serveur d√©j√† premium')
        .setDescription('Ce serveur dispose d√©j√† du statut premium!')
        .addFields(
          { name: 'üéØ Avantages actifs', value: '‚Ä¢ Formulaires illimit√©s\n‚Ä¢ Cooldowns personnalis√©s\n‚Ä¢ Support prioritaire\n‚Ä¢ Fonctionnalit√©s avanc√©es', inline: false }
        )
        .setColor(0xFFD700)
        .setFooter({ text: 'Votre serveur profite d√©j√† de tous les avantages premium' });

      return interaction.reply({
        embeds: [embed],
        ephemeral: true
      });
    }

    try {
      await interaction.deferReply({ ephemeral: true });

      // V√©rifier si le code existe
      if (!giftCodes[code]) {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå Code invalide')
          .setDescription('Ce code cadeau n\'existe pas ou est invalide.')
          .addFields(
            { name: 'üîç V√©rifications', value: '‚Ä¢ Le code est-il correctement √©crit?\n‚Ä¢ Avez-vous inclus les tirets?\n‚Ä¢ Le code a-t-il d√©j√† √©t√© utilis√©?', inline: false }
          )
          .setColor(0xE74C3C)
          .setFooter({ text: 'Format attendu: XXXX-XXXX-XXXX-XXXX' });

        return await interaction.editReply({
          embeds: [embed]
        });
      }

      const giftCode = giftCodes[code];

      // V√©rifier si le code a d√©j√† √©t√© utilis√©
      if (giftCode.used) {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå Code d√©j√† utilis√©')
          .setDescription('Ce code cadeau a d√©j√† √©t√© utilis√©.')
          .addFields(
            { name: 'üìä Informations', value: `**Utilis√© le:** ${new Date(giftCode.usedAt).toLocaleString()}\n**Utilis√© par:** <@${giftCode.usedBy}>\n**Serveur:** ${giftCode.guildId}`, inline: false }
          )
          .setColor(0xE74C3C)
          .setFooter({ text: 'Chaque code ne peut √™tre utilis√© qu\'une seule fois' });

        return await interaction.editReply({
          embeds: [embed]
        });
      }

      // Activer le premium sur ce serveur
      premiumGuilds.push(interaction.guildId);
      client.premiumGuilds = premiumGuilds;

      // Marquer le code comme utilis√©
      giftCode.used = true;
      giftCode.usedBy = interaction.user.id;
      giftCode.usedAt = new Date().toISOString();
      giftCode.guildId = interaction.guildId;

      // Sauvegarder les changements
      const saveCodesSuccess = saveGiftCodes();
      const savePremiumSuccess = savePremiumList();

      if (!saveCodesSuccess || !savePremiumSuccess) {
        return await interaction.editReply({
          content: '‚ùå Erreur lors de la sauvegarde. Veuillez r√©essayer.'
        });
      }

      // Log de l'activation
      await logToWebhookAndConsole(
        "‚ú® Premium activ√© via code cadeau",
        `**${interaction.user.username}** a activ√© le premium sur **${interaction.guild.name}** avec un code cadeau`,
        [
          { name: "Code utilis√©", value: `\`${code}\``, inline: true },
          { name: "Utilisateur", value: `${interaction.user.username} (ID: ${interaction.user.id})`, inline: true },
          { name: "Serveur", value: `${interaction.guild.name} (ID: ${interaction.guildId})`, inline: false },
          { name: "Code cr√©√© par", value: `<@${giftCode.createdBy}>`, inline: true },
          { name: "Date cr√©ation", value: new Date(giftCode.createdAt).toLocaleString(), inline: true }
        ],
        0xFFD700
      );

      // Cr√©er l'embed de succ√®s
      const successEmbed = new EmbedBuilder()
        .setTitle('‚ú® Premium activ√© avec succ√®s!')
        .setDescription(`üéâ F√©licitations! Le serveur **${interaction.guild.name}** est maintenant premium!`)
        .addFields(
          { name: 'üéÅ Code utilis√©', value: `\`${code}\``, inline: true },
          { name: 'üìÖ Activ√© le', value: new Date().toLocaleString(), inline: true },
          { name: 'üë§ Activ√© par', value: interaction.user.toString(), inline: true },
          { 
            name: 'üéØ Avantages d√©bloqu√©s', 
            value: '‚Ä¢ **Formulaires illimit√©s** (fini la limite de 3)\n‚Ä¢ **Cooldowns personnalis√©s** pour vos formulaires\n‚Ä¢ **Support prioritaire** de notre √©quipe\n‚Ä¢ **Fonctionnalit√©s avanc√©es** √† venir\n‚Ä¢ **Badge premium** sur votre serveur', 
            inline: false 
          }
        )
        .setColor(0xFFD700)
        .setFooter({ text: 'üéâ Merci de votre confiance! Profitez bien de vos nouveaux avantages.' })
        .setTimestamp();

      await interaction.editReply({
        embeds: [successEmbed]
      });

      // Envoyer un message de remerciement dans le canal courant (si permissions)
      try {
        if (interaction.channel.permissionsFor(interaction.guild.members.me).has(['SendMessages', 'EmbedLinks'])) {
          const publicEmbed = new EmbedBuilder()
            .setTitle('üéâ Serveur Premium activ√©!')
            .setDescription(`Ce serveur vient d'√™tre mis √† niveau vers le statut premium!`)
            .addFields(
              { name: '‚ú® Nouveaux avantages', value: 'Formulaires illimit√©s ‚Ä¢ Cooldowns ‚Ä¢ Support prioritaire', inline: false }
            )
            .setColor(0xFFD700)
            .setThumbnail(interaction.guild.iconURL({ dynamic: true }));

          setTimeout(() => {
            interaction.channel.send({ embeds: [publicEmbed] }).catch(() => {});
          }, 2000);
        }
      } catch (error) {
        // Ignore les erreurs de permissions
      }

      console.log(`Premium activ√© sur ${interaction.guild.name} (${interaction.guildId}) par ${interaction.user.username} avec le code ${code}`);

    } catch (error) {
      console.error('Erreur lors de l\'utilisation du code cadeau:', error);
      
      if (interaction.deferred) {
        await interaction.editReply({
          content: '‚ùå Erreur lors de l\'activation du premium. Veuillez r√©essayer.'
        });
      } else {
        await interaction.reply({
          content: '‚ùå Erreur lors de l\'activation du premium. Veuillez r√©essayer.',
          ephemeral: true
        });
      }
    }
  }
};
